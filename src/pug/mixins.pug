//- src/pug/mixins.pug
mixin picture(src, alt, options = {})
    -
        const {
            className = '',
            widths = [320, 640, 960, 1280, 1920],
            formats = ['webp', 'jpg'],
            quality = 80,
            sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 80vw, 60vw',
            lazy = true
        } = options

    //- Функция для генерации srcset
        const generateSrcSet = (format) => {
            return widths.map(width => `${src}?w=${width}&format=${format}&quality=${quality} ${width}w`).join(', ')
        }

        const defaultImg = `${src}?w=${widths[0]}&format=jpg&quality=${quality}`

    picture(class=`picture ${className}`)
        each format in formats
            source(
                type=`image/${format}`
                srcset=generateSrcSet(format)
                sizes=sizes
            )
        img(
            src=defaultImg
            srcset=generateSrcSet('jpg')
            sizes=sizes
            alt=alt
            loading=lazy ? 'lazy' : 'eager'
            class=className
        )

//- Миксин для ретина изображений
mixin retina-picture(src, alt, options = {})
    -
        const {
            className = '',
            baseWidths = [320, 640, 960, 1280],
            retinaWidths = [640, 1280, 1920, 2560],
            formats = ['webp', 'jpg'],
            quality = 80
        } = options

        const generateSrcSet = (format, widths) => {
            return widths.map(width => `${src}?w=${width}&format=${format}&quality=${quality} ${width}w`).join(', ')
        }

    picture(class=`picture ${className}`)
        each format in formats
            source(
                type=`image/${format}`
                srcset=`${generateSrcSet(format, baseWidths)}, ${generateSrcSet(format, retinaWidths)} 2x`
                sizes='100vw'
            )
        img(
            src=`${src}?w=${baseWidths[0]}&format=jpg&quality=${quality}`
            srcset=`${generateSrcSet('jpg', baseWidths)}, ${generateSrcSet('jpg', retinaWidths)} 2x`
            alt=alt
            loading='lazy'
            class=className
        )

//- Миксин для адаптивных изображений с breakpoints
mixin responsive-picture(src, alt, options = {})
    -
        const {
            className = '',
            mobile = [375, 750],
            tablet = [768, 1536],
            desktop = [1024, 2048],
            formats = ['webp', 'jpg'],
            quality = 80
        } = options

    picture(class=`picture ${className}`)
        //- Mobile first
        each format in formats
            source(
                type=`image/${format}`
                media='(max-width: 767px)'
                srcset=mobile.map(width => `${src}?w=${width}&format=${format}&quality=${quality} ${width}w`).join(', ')
            )
        each format in formats
            source(
                type=`image/${format}`
                media='(min-width: 768px) and (max-width: 1023px)'
                srcset=tablet.map(width => `${src}?w=${width}&format=${format}&quality=${quality} ${width}w`).join(', ')
            )
        each format in formats
            source(
                type=`image/${format}`
                media='(min-width: 1024px)'
                srcset=desktop.map(width => `${src}?w=${width}&format=${format}&quality=${quality} ${width}w`).join(', ')
            )
        img(
            src=`${src}?w=${mobile[0]}&format=jpg&quality=${quality}`
            alt=alt
            loading='lazy'
            class=className
        )